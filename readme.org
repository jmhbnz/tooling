#+TITLE: Tooling setup
#+AUTHOR: James Blair
#+EMAIL: mail@jamesblair.net
#+DATE: <2021-09-27 Mon 06:16>


This document captures my standard tooling for future replication and aims to make it as easy as possible to setup and use.

The environment is based on [[https://linuxmint.com/][Linux Mint]] ~20.3~ primarily, although guides for Windows 11 with [[https://docs.microsoft.com/en-us/windows/wsl/about][Window Subsystem for Linux]] are included from a legacy perspective.


* How I get things done

Before diving into the technical details, below is a brief summary of how I get things done.

** Code editing

For an editor I primarily rely on [[https://www.gnu.org/software/emacs/][emacs]], specifically [[https://github.com/humacs/humacs][humacs]]. To pair and share my terminals with others I rely on [[https://tmate.io/][tmate]].

The main feature that I rely on in emacs is [[https://orgmode.org/][org-mode]]. This allows me to do literate programming, writing my documenation with embedded code blocks that are actually executable or exportable via [[https://orgmode.org/worg/org-contrib/babel/intro.html][babel]].

Working with some clients I also use [[https://code.visualstudio.com/][visual studio code]].

** Browsing the web

My primary browser is [[https://www.mozilla.org/en-GB/firefox/new/][firefox]]. The addons I use are:
  - u-block origin
  - https everywhere
  - privacy badger

For monitoring traffic, blocking connections, enforcing secure dns and routing connections through other servers vpn style I rely on [[https://safing.io/portmaster/][Portmaster]] + [[https://safing.io/spn/][SPN]].

** Reading email


For reading email I rely on the [[http://www.mutt.org][mutt]] terminal email client. Included in this repository are the configuration dotfiles I use.

I've configured mutt to be able to display html emails via ~lynx~ and open links with ~urlscan~.

The thing I like most about mutt is the caching which means I can traverse or scan through my entire email history in seconds. In a browser this would be a painfully slow process.

** Managing secrets

[[https://bitwarden.com/][Bitwarden]] is my secrets manager of choice. Primarily due to the emphasis they place on open source and excellent ~bw~ cli utility. Use of the bitwarden cli is incorporated into many of my workflows.

One of the things I really like and use daily is leveraging bitwarden for my one time passwords. I can run something like ~bw get totp <thing> | xclip~ in a terminal and have a two factor auth code copied straight onto my clipboard ready to paste where it is required.

The [[./.bashrc][.bashrc]] file in this repository includes helper functions to make bitwarden workflows even faster.
